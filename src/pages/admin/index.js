import AdminLayout from '@/Layout/AdminLayout';
import Head from 'next/head';
import React from 'react';
import jwt from 'jsonwebtoken';
import cookie from 'cookie';
import axios from 'axios';
import DashboardView from '@/Views/Admin/Dashboard';
import adminAut from '@/Helper/Authorization/adminAut';

export default function Dashboard({ getOrderData, totalOrderItems }) {
  return (
    <>
      <Head>
        <title>foodie order</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <AdminLayout>
        {/* <DashboardView getOrderData={getOrderData} /> */}
        <DashboardView
          getOrderData={getOrderData}
          totalOrderItems={totalOrderItems}
        />
      </AdminLayout>
    </>
  );
}

export async function getServerSideProps(context) {
  let cookieHeader = context.req.headers.cookie;
  const { sortType, sortBy, search, field, page, limit, ...searchValues } =
    context.query;

  if (typeof cookieHeader !== 'string') {
    cookieHeader = '';
  }
  const cookies = cookie.parse(cookieHeader).token;
  const jwtData = jwt.decode(cookies);

  const authResult = adminAut(jwtData, cookies);
  if (authResult) return authResult;

  let getOrderData = [];
  let totalOrderItems;
  try {
    const response = await axios.get(
      'http://localhost:5000/api/all-order-menu',
      {
        headers: {
          Authorization: `Bearer ${cookies}`,
        },
        params: {
          sortBy: sortBy || 'createdAt',
          sortType: sortType || 'desc',
          search: search || '',
          field: field || '',
          limit: limit || '10',
          page: page || '1',
          ...searchValues,
        },
      }
    );

    if (response.status === 200) {
      // getOrderData = response.data.data.orderData;
      totalOrderItems = response.data.data.totalItems;
      getOrderData = response.data.data.newOrderData;
    }
  } catch (error) {
    console.error(error);
  }

  return {
    props: { getOrderData, totalOrderItems },
  };
}
